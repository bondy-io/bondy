
%% =============================================================================
%%  validate-config - Validates the necessary configuration files for Bondy
%%  are present.
%%
%%  Copyright (c) 2016-2024 Leapsight. All rights reserved.
%%
%%  Licensed under the Apache License, Version 2.0 (the "License");
%%  you may not use this file except in compliance with the License.
%%  You may obtain a copy of the License at
%%  http://www.apache.org/licenses/LICENSE-2.0
%%
%%  Unless required by applicable law or agreed to in writing, software
%%  distributed under the License is distributed on an "AS IS" BASIS,
%%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%%  See the License for the specific language governing permissions and
%%  limitations under the License.
%% =============================================================================



-define(RESET, "\e[0m").
-define(NC, "\033[0m").
-define(GREEN, "\033[0;32m").
-define(YELLOW, "\033[0;33m").
-define(RED, "\033[0;31m").

-define(LOG_ERROR(Reason, Args),
    io:format(
        "~s===> [error] validate-config " ++ Reason ++ "~s~n",
        [?RED | Args] ++ [?RESET]
    )
).

-define(LOG_INFO(Reason, Args),
    io:format(
        "~s===> [info] validate-config " ++ Reason ++ "~s~n",
        [?NC | Args] ++ [?RESET]
    )
).

-define(LOG_WARNING(Reason, Args),
    io:format(
        "~s===> [info] validate-config " ++ Reason ++ "~s~n",
        [?YELLOW | Args] ++ [?RESET]
    )
).


-export([main/1]).


main([EtcDir, _ReleaseDir]) ->
    ?LOG_WARNING("Validating configuration files", []),
    AllFiles = sets:from_list(files(EtcDir)),
    BondyCheck = bondy_config_check(EtcDir, AllFiles),
    VMExtraCheck = vm_extra_check(EtcDir, AllFiles),
    (BondyCheck andalso VMExtraCheck) orelse halt(1),
    ok;

main(Args) ->
    ?LOG_ERROR(
        "Invalid arguments ~p.",
        [Args]
    ),
    halt(1).




%% =============================================================================
%% PRIVATE
%% =============================================================================

bondy_config_check(EtcDir, AllFiles) ->
    Bondy = sets:from_list(["bondy.conf", "bondy.conf.template"]),

    case sets:to_list(sets:intersection(Bondy, AllFiles)) of
        [] ->
            ?LOG_INFO(
                "No Bondy configuration file found at ~p. "
                "Bondy will use the default configuration. "
                "Otherwise please make sure a 'bondy.conf' file (or "
                "'bondy.conf.template' in case environment variables "
                "replacement is required) is present in the ~p directory.",
                [EtcDir, EtcDir]
            ),
            %% We generate an empty file otherwise rebar3_scuttler will not
            %% produce the default config
            ok = file:write_file(filename:join(EtcDir, "bondy.conf"), <<>>),
            true;

        [B1] ->
            ?LOG_INFO(
                "Bondy configuration file ~p was found in ~p directory",
                [B1, EtcDir]
            ),
            true;

        [B1, B2] ->
            ?LOG_INFO(
                "Both Bondy configuration file variants (~p and ~p) were found"
                " in the ~p directory. Using 'bondy.conf.template' and moving "
                "'bondy.conf' to 'disabled/bondy.conf'.",
                [B1, B2, EtcDir]
            ),
            DisabledDir = filename:join(EtcDir, "disabled"),
            _ = catch file:make_dir(DisabledDir),
            ok = file:rename(
                filename:join(EtcDir, "bondy.conf"),
                filename:join(DisabledDir, "bondy.conf")
            ),
            true
    end.

vm_extra_check(EtcDir, AllFiles) ->
    VMExtra = sets:from_list(["vm.extra.args"]),

    case sets:to_list(sets:intersection(VMExtra, AllFiles)) of
        [] ->
            ?LOG_INFO(
                "No vm.extra.args file found at ~p, "
                "creating it with empty content.",
                [EtcDir]
            ),
            %% We need this file to exist as it is loaded by the
            %% vm.args.template file, so we generate an empty file
            ok = file:write_file(
                filename:join(EtcDir, "vm.extra.args"),
                <<
                    "## Use this file to add any additional Erlang VM ",
                    "arguments that are not provided\n",
                    "## by the options in bondy.config file.\n",
                    "## The initalization script will remove any line ",
                    "containing options sname,\n",
                    "## name or setcookie as this are dynamically ",
                    "defined by Bondy based on\n"
                    "## environment variables and bondy.conf settings."
                >>),
            true;

        [File] ->
            ?LOG_INFO(
                "VM Extra configuration file ~p was found in ~p directory. "
                "Chedking file and removing any usage of -sname, -name and "
                "-setcookie options as these are dynamically added by Bondy "
                "based on the 'bondy.config' filed and environment variables.",
                [File, EtcDir]
            ),
            remove_vm_args_options(EtcDir, File)
    end.


% Function to filter lines
remove_vm_args_options(EtcDir, File) ->
    Filename = filename:join(EtcDir, File),
    {ok, Content} = file:read_file(Filename),
    Lines = binary:split(Content, <<"\n">>, [global]),
    FilteredLines = [Line || Line <- Lines, not is_prohibited_option(Line)],
    % Writing the filtered lines back to the file
    NewContent = lists:join(<<"\n">>, FilteredLines),
    ok == file:write_file(Filename, NewContent).


% Function to check if the line contains prohibited options
is_prohibited_option(Line) ->
    LineStr = binary_to_list(Line),
    lists:any(fun(Opt) -> string:find(LineStr, Opt) /= nomatch end, ["-sname", "-name", "-setcookie"]).


files(Dir) ->
    filelib:wildcard("*.*", Dir).




