%% =============================================================================
%%  bondy.schema - Bondy configuration schema for Cuttlefish
%%
%%  Copyright (c) 2016-2023 Leapsight. All rights reserved.
%%
%%  Licensed under the Apache License, Version 2.0 (the "License");
%%  you may not use this file except in compliance with the License.
%%  You may obtain a copy of the License at
%%
%%     http://www.apache.org/licenses/LICENSE-2.0
%%
%%  Unless required by applicable law or agreed to in writing, software
%%  distributed under the License is distributed on an "AS IS" BASIS,
%%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%%  See the License for the specific language governing permissions and
%%  limitations under the License.
%% =============================================================================


%% =============================================================================
%% CLIENT TCP CONNECTIONS
%% =============================================================================

%% @doc Enabled or disable a bridge relay
{mapping, "bridge.$name", "bondy.bridges", [
  {commented, off},
  {datatype, flag}
]}.

%% @doc Defines the endpoint and port number of the remote Bondy Router this
%% edge node will connect to.
{mapping, "bridge.$name.endpoint", "bondy.bridges", [
  {commented, "127.0.0.1:18092"},
  {datatype, string}
]}.


{mapping, "bridge.$name.transport", "bondy.bridges", [
  {commented, tcp},
  {datatype, {enum, [tcp, tls]}}
]}.

%% @doc Default cert location for cluster TLS connection
{mapping, "bridge.$name.tls.certfile", "bondy.bridges", [
{datatype, file},
{commented, "{{platform_etc_dir}}/client/keycert.pem"}
]}.

%% @doc Default key location for cluster TLS connection
{mapping, "bridge.$name.tls.keyfile", "bondy.bridges", [
{datatype, file},
{commented, "{{platform_etc_dir}}/client/key.pem"}
]}.

%% @doc Default signing authority location for cluster TLS connection
{mapping, "bridge.$name.tls.cacertfile", "bondy.bridges", [
{datatype, file},
{commented, "{{platform_etc_dir}}/client/cacert.pem"}
]}.

%% @doc A comma separate list of TLS protocol versions that will be supported
%% At the moment Bondy only supports versions 1.2 and 1.3
{mapping, "bridge.$name.tls.versions", "bondy.bridges", [
{datatype, string},
{commented, "1.3"}
]}.

{mapping, "bridge.$name.tls.verify", "bondy.bridges", [
{datatype, {enum, [verify_peer, verify_none]}},
{commented, verify_none}
]}.


%% @doc Defines the number of TCP connections for the edge-remote connection
{mapping, "bridge.$name.parallelism", "bondy.bridges", [
{commented, 1},
{validators, ["pos_integer"]},
{datatype, integer}
]}.

{mapping, "bridge.$name.connect_timeout", "bondy.bridges", [
{commented, "5s"},
{datatype, [{atom, infinity}, {duration, ms}]}
]}.

%% @doc Enables or disables the reconnect feature. Once a connection is
%% established but fails due to an unknown error or by the connecting being
%% aborted by the remote with an error that is recoverable, we might want to
%% ask Bondy to retyr the connection e.g. when connecting with realm A the
%% remote aborts the connection with reason `no_such_realm', in this case maybe
%% the realm has not yet been provisioned, so we want the connection to retry
%% indefinitely.
%% @end
{mapping, "bridge.$name.reconnect", "bondy.bridges", [
  {commented, on},
  {datatype, flag}
]}.

{mapping, "bridge.$name.reconnect.max_retries", "bondy.bridges", [
  {commented, 100},
  {validators, ["pos_integer"]},
  {datatype, integer}
]}.

{mapping, "bridge.$name.reconnect.backoff.type", "bondy.bridges", [
  {commented, jitter},
  {datatype, {enum, [jitter, normal]}}
]}.

{mapping, "bridge.$name.reconnect.backoff.min", "bondy.bridges", [
  {commented, "5s"},
  {datatype, {duration, ms}}
]}.

{mapping, "bridge.$name.reconnect.backoff.max", "bondy.bridges", [
  {commented, "60s"},
  {datatype, {duration, ms}}
]}.

%% @doc Drops the connection when the bridge has been waiting the network to be
%% up after a period of inactivity.
%% Notice that to determine if the network is up the current implementation
%% checks the hosts' number of IPV4 network interfaces (ignoring the loopback
%% interface), so for local development without and network connection you want
%% to disable this functionality. Setting a value to infinity, disables it.
{mapping, "bridge.$name.network_timeout", "bondy.bridges", [
{commented, "60s"},
{datatype, [{atom, infinity}, {duration, ms}]}
]}.


%% @doc Drops the connection after a period of inactivity.
{mapping, "bridge.$name.idle_timeout", "bondy.bridges", [
{commented, "24h"},
{datatype, [{atom, infinity}, {duration, ms}]}
]}.

{mapping, "bridge.$name.hibernate", "bondy.bridges", [
{commented, idle},
{datatype, {enum, [never, idle, always]}}
]}.

%% @doc Defines if PING control message functionality is enabled or
%% not.
%% This option affects client (Bondy Edge) initiated pings only. The
%% remote Bondy router might also initiate ping requests and Bondy Edge will
%% always respond to those even if this option is turned off.
%% This feature is useful to keep a connection alive and validate the
%% connection is healthy.
{mapping, "bridge.$name.ping", "bondy.bridges", [
  {commented, on},
  {datatype, {flag, on, off}}
]}.

%% @doc If bridge.$name.ping.enabled is 'on', this parameter controls the
%% maximum time interval that is permitted to elapse between the point at which
%% the remote router finishes transmitting a message and the point it starts
%% sending the next.
%% Notice this is not the same as bridge.$name.idle_timeout.
{mapping, "bridge.$name.ping.idle_timeout", "bondy.bridges", [
  {commented, "20s"},
  {datatype, {duration, ms}}
]}.



%% @doc If  bridge.$name.ping.enabled is 'on', this parameter controls the
%% amount of time Bondy waits for a ping response from the remote.
%% Once that time has passed this counts as a fail attempt
%% (see bridge.$name.ping.max_attempts).
{mapping, "bridge.$name.ping.timeout", "bondy.bridges", [
{default, "10s"},
{datatype, {duration, ms}}
]}.

%% @doc If  bridge.$name.ping.enabled is 'on', this parameter controls maximum number of ping attempts Bondy will do before dropping the connection.
{mapping,
"bridge.$name.ping.max_attempts", "bondy.bridges", [
  {commented, 2},
  {datatype, integer},
  {validators, ["pos_integer"]}
]}.


%% Maximum frame size allowed by this handler. Bondy will close the
%% connection when a client attempts to send a frame that goes over this limit.
%% For fragmented frames this applies to the size of the reconstituted frame.
%%
%% A value of zero means un unbounded size (internally translated to 'infinity')
{mapping, "bridge.$name.max_frame_size", "bondy.bridges", [
  {commented, infinity},
  {datatype, [{atom, infinity}, integer]}
]}.


{mapping, "bridge.$name.realm.$id.uri", "bondy.bridges", [
  {datatype, string}
]}.

{mapping, "bridge.$name.realm.$id.authid", "bondy.bridges", [
  {datatype, string}
]}.


{mapping, "bridge.$name.realm.$id.cryptosign.pubkey", "bondy.bridges", [
  {datatype, string}
]}.

%% A WAMP procedure implemented by a WAMP callee connected locally to the
%% realm and having been granted the following permissions:
%% - "wamp.register" on the desired procedure e.g. "com.myapp.crypto.sign"
%% - "bondy.callback.register" on "bondy.auth.crytosign.sign"
%%
%% The procedure MUST accept two positional arguments:
%% - user's pubkey
%% - a challenge consisting of a binary encoded using base64
%%
%% And it MUST return the base64 encoded binary resulting from signing
%% the challenge with the users's private key known to the callee matching the
%% provided pubkey.
{mapping, "bridge.$name.realm.$id.cryptosign.procedure", "bondy.bridges", [
  {datatype, string}
]}.

%% Defines the FileName for an executable to be use to compute the Crytosign
%% signature. The filename in its whole is used as the name of the executable,
%% including any spaces. The arguments are passed to the executable as-is,
%% without environment variable expansion or other processing, neutralizing
%% injection attack, specifically:
%% * The shell is usually not invoked to start the program, it is executed
%% directly.
%% * Only if a shell script is executed, the appropriate command
%% interpreter is invoked implicitly, but there is still no command-argument
%% expansion or implicit PATH search.
%% * PATH (or equivalent) is not searched.
%%
%% The executable is expected to take two positional arguments:
%% - user's pubkey
%% - a challenge consisting of a binary encoded using base64
%%
%% The executable MUST return the base64 encoded binary resulting from signing
%% the challenge with the users's private key known to the exec.

{mapping,
  "bridge.$name.realm.$id.cryptosign.exec",
  "bondy.bridges", [
    {datatype, string}
]}.

{mapping,
  "bridge.$name.realm.$id.cryptosign.privkey_env_var",
  "bondy.bridges", [
    {datatype, string}
]}.

%% For testing only, it will be removed on 1.0.0 release
{mapping,
  "bridge.$name.realm.$id.cryptosign.privkey",
  "bondy.bridges", [
    {datatype, string}
]}.



%% Defines a procedure URI pattern that is shared between the two routers for
%% in the defined realm.
%% <match-spec> ::= <uri> <match-type> <direction>
%% <uri> ::= <wamp-uri>
%% <match-type> ::= "exact" | "prefix" | "wildcard"
%% <direction> ::= "in" | "out" | "both"
{mapping,
  "bridge.$name.realm.$id.procedure.$pid",
  "bondy.bridges", [
    {datatype, string}
]}.

%% Defines a topic URI pattern that is shared between the two routers for
%% in the defined realm.
%% <match-spec> ::= <uri> <match-type> <direction>
%% <uri> ::= <wamp-uri>
%% <match-type> ::= "exact" | "prefix" | "wildcard"
%% <direction> ::= "in" | "out" | "both"
{mapping,
  "bridge.$name.realm.$id.topic.$tid",
  "bondy.bridges", [
    {datatype, string}
]}.


{translation, "bondy.bridges", fun(Conf0) ->
      Conf1 = cuttlefish_variable:filter_by_prefix("bridge", Conf0),
    Conf2 = lists:filter(
      fun
          ({["bridge", "listener" | _], _}) -> false;
          (_) -> true
      end,
      Conf1
    ),
    %% We turn all keys to binaries so that the following utils functions work
    %% on paths
    Conf = lists:map(
      fun
        ({["bridge" | T], V}) ->
          {[list_to_binary(E) || E <- T], V};
        (KV) ->
          KV
      end,
      Conf2
    ),

    MaybeBadKey = fun
      ('$error_badkey') ->
        error(badkey);
      (Value) ->
        Value
    end,

    Get = fun
      Get([], _, _) ->
        error(badkey);

      Get(_, [], Default) ->
          MaybeBadKey(Default);

      Get(_, KVTerm, Default)
      when is_map(KVTerm) andalso map_size(KVTerm) == 0 ->
          MaybeBadKey(Default);

      Get([H|[]], KVTerm, Default) ->
          Get(H, KVTerm, Default);

      Get([H|T], KVTerm, Default) when is_list(KVTerm) ->
          case lists:keyfind(H, 1, KVTerm) of
              {H, Child} ->
                  Get(T, Child, Default);
              false ->
                  MaybeBadKey(Default)
          end;

      Get(Key, KVTerm, Default) when is_list(KVTerm) ->
          case lists:keyfind(Key, 1, KVTerm) of
              {Key, Value} ->
                  Value;
              false ->
                  MaybeBadKey(Default)
          end;

      Get([H|T], KVTerm, Default) when is_map(KVTerm) ->
          case maps:find(H, KVTerm) of
              {ok, Child} ->
                  Get(T, Child, Default);
              error ->
                  MaybeBadKey(Default)
          end;

      Get(Key, KVTerm, Default) when is_map(KVTerm) ->
          MaybeBadKey(maps:get(Key, KVTerm, Default));

      Get(_, _, _) ->
          error(badarg)

    end,

    Put = fun
      Put([H|[]], Value, KVTerm) ->
        Put(H, Value, KVTerm);

      Put([H|T], Value, KVTerm) when is_list(KVTerm) ->

          InnerTerm = Put(T, Value, Get(H, KVTerm, #{})),
          % lists:keystore(H, 1, KVTerm, {H, InnerTerm});

          Map = maps:from_list(KVTerm),
          Merge = fun
            (Term) when is_list(Term) ->
              maps:merge(maps:from_list(Term), InnerTerm);
            (Term) when is_map(Term) ->
              maps:merge(Term, InnerTerm)
          end,
          maps:update_with(H, Merge, InnerTerm, Map);


      Put([H|T], Value, KVTerm) when is_map(KVTerm) ->
          InnerTerm = Put(T, Value, Get(H, KVTerm, #{})),
          maps:put(H, InnerTerm, KVTerm);

      Put([], _, _)  ->
          error(badkey);

      Put(Key, Value, KVTerm) when is_list(KVTerm) ->
          % lists:keystore(Key, 1, KVTerm, {Key, Value});
          Map = maps:from_list(KVTerm),
          maps:put(Key, Value, Map);

      Put(Key, Value, KVTerm) when is_map(KVTerm) ->
          maps:put(Key, Value, KVTerm);

      Put(_, _, _) ->
          error(badarg)
    end,

    Fun = fun
      ({[Name], Value}, Acc) ->
        Put([Name, enabled], Value, Acc);

      ({[Name, <<"endpoint">>], Endpoint}, Acc) ->
        try
          is_list(Endpoint) orelse throw(invalid),

          case string:split(Endpoint, ":") of
            [Host, PortStr] ->
              Port = list_to_integer(PortStr),

              Port >= 1024
                andalso Port =< 65535
                orelse throw(invalid_port),

              case inet:getaddr(Host, inet) of
                {ok, IP} ->
                  Put([Name, endpoint], {IP, Port}, Acc);
                _ ->
                  case inet:getaddr(Host, inet6) of
                    {ok, IP} ->
                      Put([Name, endpoint], {IP, Port}, Acc);
                    _ ->
                      throw(invalid_endpoint)
                  end
              end;
            _ ->
              throw(invalid)
          end

        catch
            throw:invalid ->
              cuttlefish:invalid(
                "value should be string with IP or Hostname and Port Number separated by a colon e.g. \"127.0.0.1:18080\""
              );
            throw:invalid_port ->
              cuttlefish:invalid(
                "value for the Port Number should be greater than 1023 and lower than 65536"
              );
            throw:invalid_endpoint ->
              cuttlefish:invalid(
                "value for the endpoint refers to a non-existing domain"
              )
        end;

      ({[Name, <<"reconnect">>], Value}, Acc) ->
        Put([Name, reconnect, enabled], Value, Acc);

      ({[Name, <<"reconnect">>, KeyStr], Value}, Acc) ->
        Key = binary_to_atom(KeyStr),
        Put([Name, reconnect, Key], Value, Acc);

      ({[Name, <<"reconnect">>, <<"backoff">>, KeyStr], Value}, Acc) ->
        Key = binary_to_atom(<<"backoff_", KeyStr/binary>>),
        Put([Name, reconnect, Key], Value, Acc);

      ({[Name, <<"ping">>], Value}, Acc) ->
        Put([Name, ping, enabled], Value, Acc);

      ({[Name, <<"ping">>, KeyStr], Value}, Acc) ->
        Key = binary_to_atom(KeyStr),
        Put([Name, ping, Key], Value, Acc);

      ({[Name, KeyStr], Value}, Acc)
      when  KeyStr == <<"parallelism">>;
            KeyStr == <<"transport">>;
            KeyStr == <<"idle_timeout">>;
            KeyStr == <<"hibernate">>;
            KeyStr == <<"network_timeout">>;
            KeyStr == <<"connect_timeout">>;
            KeyStr == <<"max_frame_size">> ->
        Key = binary_to_atom(KeyStr),
        Put([Name, Key], Value, Acc);

      ({[Name, <<"tls">>, KeyStr], Value}, Acc)
      when  KeyStr == <<"cacertfile">>;
            KeyStr == <<"certfile">>;
            KeyStr == <<"keyfile">>;
            KeyStr == <<"verify">>  ->
        Key = binary_to_atom(KeyStr),
        Put([Name, tls_opts, Key], Value, Acc);

      ({[Name, <<"tls">>, <<"versions">>], Versions}, Acc) ->
        try
          is_list(Versions) orelse throw(invalid),

          Value = [
            begin
              case string:strip(Version) of
                "1.2" -> 'tlsv1.2';
                "1.3" -> 'tlsv1.3';
                _ -> throw({invalid_version, Version})
              end
            end || Version <- string:split(Versions, ",")
          ],

          Put([Name, tls_opts, versions], Value, Acc)

        catch
            throw:invalid ->
              cuttlefish:invalid(
                "value should be string containing valid comma separated version numbers e.g. \"1.2, 1.3\""
              );

            throw:{invalid_version, Version} ->
              cuttlefish:invalid("invalid TLS version " ++ Version)
        end;

      ({[Name, <<"realm">>, Id, KeyStr], ValueStr}, Acc)
      when  KeyStr == <<"uri">>;
            KeyStr == <<"authid">> ->

        Key = binary_to_atom(KeyStr),
        Value = list_to_binary(ValueStr),

        Put([Name, realms, Id, Key], Value, Acc);

      ({[Name, <<"realm">>, Id, <<"cryptosign">>, KeyStr], ValueStr}, Acc)
      when  KeyStr == <<"pubkey">>;
            KeyStr == <<"procedure">>;
            KeyStr == <<"exec">>;
            KeyStr == <<"privkey">>; %% this will be removed on 1.0.0
            KeyStr == <<"privkey_env_var">> ->

        Key = binary_to_atom(KeyStr),
        Value = list_to_binary(ValueStr),

        Put([Name, realms, Id, cryptosign, Key], Value, Acc);


      ({[Name, <<"realm">>, Id, UriType, KeyStr], Spec}, Acc)
      when  UriType == <<"procedure">>;
            UriType == <<"topic">> ->
          %  Key = list_to_binary(KeyStr),
          %% Plural key to use in map
          Type = binary_to_atom(<<UriType/binary, "s">>),


          try

            case string:split(Spec, [$\s], all) of
              [Uri, Match, Direction] ->
                lists:member(Match, ["exact", "prefix", "wildcard"])
                  orelse throw(invalid_match_spec),

                lists:member(Direction, ["in", "out", "both"])
                  orelse throw(invalid_match_spec),

                E = #{
                  uri => list_to_binary(Uri),
                  match => list_to_binary(Match),
                  direction => list_to_atom(Direction)
                },

                case Get([Name, realms, Id, Type], Acc, undefined) of
                  undefined ->
                    Put([Name, realms, Id, Type], [E], Acc);

                  Es ->
                    Put([Name, realms, Id, Type], [E|Es], Acc)
                end;

              _ ->
                  throw(invalid_match_spec)
            end

          catch
            throw:invalid_match_spec ->
              cuttlefish:invalid(
                "invalid " ++ UriType ++ " match specification " ++
                "'" ++ Spec ++ "'" ++
                " for identifier " ++
                "'" ++ KeyStr ++ "'"
              )
          end;

      (KV, Acc) ->
        cuttlefish:invalid(
          "invalid configuration option " ++
          io_lib:format("~p", [KV])
        )

      end,

      OutMap0 = lists:foldl(Fun, #{}, Conf),

      try

        maps:fold(
          fun
            (Name, Bridge0, Acc) ->
              Bridge = maps:map(
                  fun(realms, Realms0) ->

                        maps:fold(
                          fun(RealmId, Realm, Acc) ->
                              [Realm | Acc]
                          end,
                          [],
                          Realms0
                        );
                      (K, V) ->
                          V
                  end,
                  Bridge0
              ),
              %% We project #{realms => [Realm], ...}}
              maps:put(Name, Bridge, Acc);

            (_, _, Acc) ->
              Acc
          end,
          OutMap0,
          OutMap0
        )

      catch
        throw:badkey ->
          cuttlefish:invalid(
            "value for realm uri is required"
          )

      end

end}.



%% =============================================================================
%% EDGE LISTENER TCP CONNECTIONS
%% =============================================================================


%% @doc Enables or disables Bondy edge nodes to connect to Bondy.
{mapping, "bridge.listener.tcp", "bondy.bridge_relay_tcp.enabled", [
  {default, off},
  {datatype, {flag, on, off}}
]}.

%% @doc TCP port that Bondy edge nodes will use to connect to Bondy.
{mapping, "bridge.listener.tcp.port", "bondy.bridge_relay_tcp.port", [
  {default, 18092},
  {validators, [port_number]},
  {datatype, integer}
]}.

%% The ranch acceptors_pool_size for the socket tcp listener
{mapping, "bridge.listener.tcp.acceptors_pool_size", "bondy.bridge_relay_tcp.acceptors_pool_size", [
  {datatype, integer},
  {validators, ["pos_integer"]},
  {default, 200}
]}.

%% The ranch max number of connections for the socket tcp listener
{mapping, "bridge.listener.tcp.max_connections", "bondy.bridge_relay_tcp.max_connections", [
  {datatype, integer},
  {validators, ["pos_integer"]},
  {default, 100000}
]}.

%% The maximum length that the queue of pending connections can grow to.
{mapping, "bridge.listener.tcp.backlog", "bondy.bridge_relay_tcp.backlog", [
  {datatype, integer},
  {validators, ["pos_integer"]},
  {default, 1024}
]}.


%% Enables/disables periodic transmission on a connected socket when no other
%% data is exchanged. If the other end does not respond, the connection is
%% considered broken and an error message is sent to the controlling process.
{mapping, "bridge.listener.tcp.keepalive", "bondy.bridge_relay_tcp.socket_opts.keepalive", [
  {datatype, {flag, on, off}},
  {default, on}
]}.

%% The minimum size of the send buffer to use for the socket.
{mapping, "bridge.listener.tcp.sndbuf", "bondy.bridge_relay_tcp.socket_opts.sndbuf", [
  {datatype, bytesize}
]}.

%% The minimum size of the receive buffer to use for the socket.
{mapping, "bridge.listener.tcp.recbuf", "bondy.bridge_relay_tcp.socket_opts.recbuf", [
  {datatype, bytesize}
]}.

%% The size of the user-level software buffer used by the driver.
%% Not to be confused with options sndbuf and recbuf, which correspond to the
%% Kernel socket buffers.
%% It is recommended to have val(buffer) >= max(val(sndbuf),val(recbuf)) to
%% avoid performance issues because of unnecessary copying.
%% val(buffer) is automatically set to the above maximum when values sndbuf or
%% recbuf are set.
{mapping, "bridge.listener.tcp.buffer", "bondy.bridge_relay_tcp.socket_opts.buffer", [
  {datatype, bytesize}
]}.

%% If Boolean == true, option TCP_NODELAY is turned on for the socket, which
%% means that also small amounts of data are sent immediately.
{mapping, "bridge.listener.tcp.nodelay", "bondy.bridge_relay_tcp.socket_opts.nodelay", [
  {datatype, {flag, on, off}},
  {default, on}
]}.


%% @doc Defines if  PING control message functionality is enabled or
%% not. This option affects server (Bondy) initiated pings only. Bondy Edge
%% might also initiate ping requests and Bondy will always respond to those
%% even if this option is turned off.
%% This feature is useful to keep a connection alive and validate the
%% connection is healthy.
{mapping, "bridge.listener.tcp.ping", "bondy.bridge_relay_tcp.ping.enabled", [
  {default, on},
  {datatype, {flag, on, off}}
]}.

%% @doc If bridge.listener.tcp.ping.enabled is 'on', this parameter controls the
%% maximum time interval that is permitted to elapse between the point at which
%% the remote router finishes transmitting a message and the point it starts
%% sending the next.
%% Notice this is not the same as bridge.listener.tcp.idle_timeout.
{mapping, "bridge.listener.tcp.ping.idle_timeout", "bondy.bridge_relay_tcp.ping.idle_timeout", [
  {default, "20s"},
  {datatype, {duration, ms}}
]}.

%% @doc If bridge.listener.tcp.ping.enabled is 'on', this parameter controls the
%% amount of time Bondy waits for a ping response from the remote.
%% Once that time has passed this counts as a fail attempt
%% (see bridge.listener.tcp.ping.max_attempts).
{mapping, "bridge.listener.tcp.ping.timeout", "bondy.bridge_relay_tcp.ping.timeout", [
{default, "10s"},
{datatype, {duration, ms}}
]}.

%% @doc If bridge.listener.tcp.ping.enabled is 'on', this value controls how many
%% missed pings are considered a timeout. Thus, after this number of attempts
%% Bondy will drop the connection.
%% If the value is 'infinity' Bondy will never timeout based on missed pings.
{mapping,
"bridge.listener.tcp.ping.max_attempts",
"bondy.bridge_relay_tcp.ping.max_attempts",[
  {default, 2},
  {datatype, integer}
]}.

%% @doc The period of inactivity after which a connection is dropped. Ping
%% control messages do not reset this timer, only client or server data packets
%% do.
{mapping, "bridge.listener.tcp.idle_timeout", "bondy.bridge_relay_tcp.idle_timeout", [
  {default, "8h"},
  {datatype, [{atom, infinity}, {duration, ms}]}
]}.

%% @doc Defines whether the connection process should hibernate when its idle.
%% Enabling hibernation will typically reduce memory consumption and should not
%% have a penalty in performance as it is used only during idle state.
{mapping, "bridge.listener.tcp.hibernate", "bondy.bridge_relay_tcp.hibernate", [
{default, idle},
{datatype, {enum, [never, idle, always]}}
]}.

%% @doc The period of time without a session after which the connection is
%% dropped.
{mapping, "bridge.listener.tcp.auth_timeout", "bondy.bridge_relay_tcp.auth_timeout", [
{default, "5s"},
{datatype, [{atom, infinity}, {duration, ms}]}
]}.


%% Maximum frame size allowed by this handler. Bondy will close the
%% connection when a client attempts to send a frame that goes over this limit.
%% For fragmented frames this applies to the size of the reconstituted frame.
%%
%% A value of zero means un unbounded size (internally translated to 'infinity')
{mapping, "bridge.listener.tcp.max_frame_size", "bondy.bridge_relay_tcp.max_frame_size", [
  {default, infinity},
  {datatype, [{atom, infinity}, integer]}
]}.


%% =============================================================================
%% EDGE LISTENER TLS CONNECTIONS
%% =============================================================================


%% @doc Enables or disables Bondy edge nodes to connect to Bondy.
{mapping, "bridge.listener.tls", "bondy.bridge_relay_tls.enabled", [
  {default, off},
  {datatype, {flag, on, off}}
]}.

%% @doc TCP port that Bondy edge nodes will use to connect to Bondy.
{mapping, "bridge.listener.tls.port", "bondy.bridge_relay_tls.port", [
  {default, 18093},
  {validators, [port_number]},
  {datatype, integer}
]}.

%% The ranch acceptors_pool_size for the socket tcp listener
{mapping, "bridge.listener.tls.acceptors_pool_size", "bondy.bridge_relay_tls.acceptors_pool_size", [
  {datatype, integer},
  {validators, ["pos_integer"]},
  {default, 200}
]}.

%% The ranch max number of connections for the edge TLS listener
{mapping, "bridge.listener.tls.max_connections", "bondy.bridge_relay_tls.max_connections", [
  {datatype, integer},
  {validators, ["pos_integer"]},
  {default, 100000}
]}.

%% The maximum length that the queue of pending connections can grow to.
{mapping, "bridge.listener.tls.backlog", "bondy.bridge_relay_tls.backlog", [
  {datatype, integer},
  {default, 1024}
]}.


%% Enables/disables periodic transmission on a connected socket when no other
%% data is exchanged. If the other end does not respond, the connection is
%% considered broken and an error message is sent to the controlling process.
{mapping, "bridge.listener.tls.keepalive", "bondy.bridge_relay_tls.socket_opts.keepalive", [
  {datatype, {flag, on, off}},
  {default, on}
]}.

%% The minimum size of the send buffer to use for the socket.
{mapping, "bridge.listener.tls.sndbuf", "bondy.bridge_relay_tls.socket_opts.sndbuf", [
  {datatype, bytesize}
]}.

%% The minimum size of the receive buffer to use for the socket.
{mapping, "bridge.listener.tls.recbuf", "bondy.bridge_relay_tls.socket_opts.recbuf", [
  {datatype, bytesize}
]}.

%% The size of the user-level software buffer used by the driver.
%% Not to be confused with options sndbuf and recbuf, which correspond to the
%% Kernel socket buffers.
%% It is recommended to have val(buffer) >= max(val(sndbuf),val(recbuf)) to
%% avoid performance issues because of unnecessary copying.
%% val(buffer) is automatically set to the above maximum when values sndbuf or
%% recbuf are set.
{mapping, "bridge.listener.tls.buffer", "bondy.bridge_relay_tls.socket_opts.buffer", [
  {datatype, bytesize}
]}.

%% If Boolean == true, option TCP_NODELAY is turned on for the socket, which
%% means that also small amounts of data are sent immediately.
{mapping, "bridge.listener.tls.nodelay", "bondy.bridge_relay_tls.socket_opts.nodelay", [
  {datatype, {flag, on, off}},
  {default, on}
]}.

%% @doc Defines if  PING control message functionality is enabled or
%% not. This option affects server (Bondy) initiated pings only. Bondy Edge
%% might also initiate ping requests and Bondy will always respond to those
%% even if this option is turned off.
%% This feature is useful to keep a connection alive and validate the
%% connection is healthy.
{mapping, "bridge.listener.tls.ping", "bondy.bridge_relay_tls.ping.enabled", [
{default, on},
{datatype, {flag, on, off}}
]}.

%% @doc If bridge.listener.tls.ping.enabled is 'on', this parameter controls the
%% maximum time interval that is permitted to elapse between the point at which
%% the remote router finishes transmitting a message and the point it starts
%% sending the next.
%% Notice this is not the same as bridge.listener.tls.idle_timeout.
{mapping, "bridge.listener.tls.ping.idle_timeout", "bondy.bridge_relay_tls.ping.idle_timeout", [
{default, "20s"},
{datatype, {duration, ms}}
]}.

%% @doc If bridge.listener.tls.ping.enabled is 'on', this parameter controls the
%% amount of time Bondy waits for a ping response from the remote.
%% Once that time has passed this counts as a fail attempt
%% (see bridge.listener.tls.ping.max_attempts).
{mapping, "bridge.listener.tls.ping.timeout", "bondy.bridge_relay_tls.ping.timeout", [
{default, "10s"},
{datatype, {duration, ms}}
]}.

%% @doc If bridge.listener.tls.ping.enabled is 'on', this value controls how many
%% missed pings are considered a timeout. Thus, after this number of attempts
%% Bondy will drop the connection.
%% If the value is 'infinity' Bondy will never timeout based on missed pings.
{mapping,
"bridge.listener.tls.ping.max_attempts",
"bondy.bridge_relay_tls.ping.max_attempts",[
{default, 2},
{datatype, integer}
]}.

%% @doc Drops the connection after a period of inactivity. This option does not
%% take effect when bridge.listener.tls.ping.enabled is 'on' and bridge.listener.tls.ping.
%% interval times bridge.listener.tls.ping.max_attempts results in a value higher
%% than this option.
%% Notice that for some clients using this option alone is not enough to keep
%% a connection alive as the client will drop the connection due to inactivity.
{mapping, "bridge.listener.tls.idle_timeout", "bondy.bridge_relay_tls.idle_timeout", [
  {default, "8h"},
  {datatype, [{atom, infinity}, {duration, ms}]}
]}.

%% @doc Defines whether the connection process should hibernate when its idle.
%% Enabling hibernation will typically reduce memory consumption and should not
%% have a penalty in performance as it is used only during idle state.
{mapping, "bridge.listener.tls.hibernate", "bondy.bridge_relay_tls.hibernate", [
{default, idle},
{datatype, {enum, [never, idle, always]}}
]}.

%% Maximum frame size allowed by this handler. Bondy will close the
%% connection when a client attempts to send a frame that goes over this limit.
%% For fragmented frames this applies to the size of the reconstituted frame.
%%
%% A value of zero means un unbounded size (internally translated to 'infinity')
{mapping, "bridge.listener.tls.max_frame_size", "bondy.bridge_relay_tls.max_frame_size", [
  {default, infinity},
  {datatype, [{atom, infinity}, integer]}
]}.


%% @doc Default cert location for https can be overridden
%% with the edge.tls config variable, for example:
{mapping, "bridge.listener.tls.certfile", "bondy.bridge_relay_tls.tls_opts.certfile", [
  {datatype, file},
  {default, "{{platform_etc_dir}}/cert.pem"}
]}.

%% @doc Default key location for https can be overridden with the
%%edge.tls config variable, for example:
{mapping, "bridge.listener.tls.keyfile", "bondy.bridge_relay_tls.tls_opts.keyfile", [
  {datatype, file},
  {default, "{{platform_etc_dir}}/key.pem"}
]}.

%% @doc Default signing authority location for https can be overridden
%% with the edge.tls config variable, for example:
{mapping, "bridge.listener.tls.cacertfile", "bondy.bridge_relay_tls.tls_opts.cacertfile", [
  {datatype, file},
  {default, "{{platform_etc_dir}}/cacert.pem"}
]}.

%% @doc A comma separate list of TLS protocol versions that will be supported
%% At the moment Bondy only supports versions 1.2 and 1.3
{mapping, "bridge.listener.tls.versions", "bondy.bridge_relay_tls.tls_opts.versions", [
  {datatype, string},
  {default, "1.3"}
]}.




{translation, "bondy.bridge_relay_tls.tls_opts.versions",
fun(Conf) ->
  case cuttlefish:conf_get("bridge.listener.tls.versions", Conf) of
      Value when is_list(Value) ->
        try
          [
            begin
              case string:strip(Version) of
                "1.2" -> 'tlsv1.2';
                "1.3" -> 'tlsv1.3';
                _ -> throw({invalid_version, Version})
              end
            end || Version <- string:split(Value, ",")
          ]
        catch
          throw:{invalid_version, Version} ->
            cuttlefish:invalid("invalid TLS version " ++ Version)
        end;
      _ ->
          cuttlefish:invalid(
            "value should be string containing valid comma separated version numbers e.g. \"1.2, 1.3\""
          )
  end
end
}.



%% =============================================================================
%% VALIDATORS
%% =============================================================================


{validator,
  "pos_integer",
  "greater than 1",
  fun(Size) -> Size >= 1 end
}.


{validator,
  "port_number",
  "greater than 1024 and less or equal to 65535",
  fun(Port) -> Port >= 1024 andalso Port =< 65535 end
}.
