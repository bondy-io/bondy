%% =============================================================================
%%  bondy.schema - Bondy configuration schema for Cuttlefish
%%
%%  Copyright (c) 2016-2022 Leapsight. All rights reserved.
%%
%%  Licensed under the Apache License, Version 2.0 (the "License");
%%  you may not use this file except in compliance with the License.
%%  You may obtain a copy of the License at
%%
%%     http://www.apache.org/licenses/LICENSE-2.0
%%
%%  Unless required by applicable law or agreed to in writing, software
%%  distributed under the License is distributed on an "AS IS" BASIS,
%%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%%  See the License for the specific language governing permissions and
%%  limitations under the License.
%% =============================================================================


%% =============================================================================
%% EDGE CLIENT TCP CONNECTIONS
%% =============================================================================


{mapping, "edge.uplink", "bondy.edge.uplink.enabled", [
  {default, off},
  {datatype, flag}
]}.

%% @doc Defines the address and port number of the remote Bondy Router this
%% edge node will connect to.
{mapping, "edge.uplink.endpoint", "bondy.edge.uplink.endpoint", [
  {commented, "127.0.0.1:18092"},
  {datatype, string}
]}.


{translation,
"bondy.edge.uplink.endpoint",
fun(Conf) ->
    try
      case cuttlefish:conf_get("edge.uplink.endpoint", Conf) of
          String when is_list(String) ->
            case string:split(String, ":") of
              [Host, PortStr] ->
                Port = list_to_integer(PortStr),

                Port >= 1024 andalso Port =< 65535
                  orelse throw(invalid_port),

                case inet:getaddr(Host, inet) of
                  {ok, IP} ->
                    {IP, Port};
                  _ ->
                    throw(invalid_addr)
                end;
              _ ->
                throw(invalid)
            end;
          _ ->
            throw(invalid)
      end

    catch
      throw:invalid ->
        cuttlefish:invalid(
          "value should be string with IP or Hostname and Port Number separated by a colon e.g. \"127.0.0.1:18080\""
        );
      throw:invalid_port ->
        cuttlefish:invalid(
          "value for the Port Number should be greater than 1023 and lower than 65536"
        );
      throw:invalid_addr ->
        cuttlefish:invalid(
          "value for the Hostname referes to a non-existing domain"
        )
    end
end}.


{mapping, "edge.uplink.transport", "bondy.edge.uplink.transport", [
  {default, tcp},
  {datatype, {enum, [tcp, tls]}}
]}.

%% @doc Default cert location for cluster TLS connection
{mapping, "edge.uplink.tls.certfile", "bondy.edge.uplink.tls_opts.certfile", [
{datatype, file},
{commented, "{{platform_etc_dir}}/client/keycert.pem"}
]}.

%% @doc Default key location for cluster TLS connection
{mapping, "edge.uplink.tls.keyfile", "bondy.edge.uplink.tls_opts.keyfile", [
{datatype, file},
{commented, "{{platform_etc_dir}}/client/key.pem"}
]}.

%% @doc Default signing authority location for cluster TLS connection
{mapping, "edge.uplink.tls.cacertfile", "bondy.edge.uplink.tls_opts.cacertfile", [
{datatype, file},
{commented, "{{platform_etc_dir}}/client/cacert.pem"}
]}.

%% @doc A comma separate list of TLS protocol versions that will be supported
%% At the moment Bondy only supports versions 1.2 and 1.3
{mapping, "edge.uplink.tls.versions", "bondy.edge.uplink.tls_opts.versions", [
{datatype, string},
{default, "1.3"}
]}.

{mapping, "edge.uplink.tls.verify", "bondy.edge.uplink.tls_opts.verify", [
{datatype, {enum, [verify_peer, verify_none]}},
{default, verify_none}
]}.


{mapping, "edge.uplink.reconnect", "bondy.edge.uplink.reconnect.enabled", [
  {default, on},
  {datatype, flag}
]}.

{mapping, "edge.uplink.reconnect.max_retries", "bondy.edge.uplink.reconnect.max_retries", [
  {default, 10},
  {validators, [pos_integer]},
  {datatype, integer}
]}.

{mapping, "edge.uplink.reconnect.backoff.type", "bondy.edge.uplink.reconnect.backoff_type", [
  {default, jitter},
  {datatype, {enum, [jitter, normal]}}
]}.

{mapping, "edge.uplink.reconnect.backoff.min", "bondy.edge.uplink.reconnect.backoff_min", [
  {default, "5s"},
  {datatype, {duration, ms}}
]}.

{mapping, "edge.uplink.reconnect.backoff.max", "bondy.edge.uplink.reconnect.backoff_max", [
  {default, "60s"},
  {datatype, {duration, ms}}
]}.

%% @doc Defines the number of TCP connections for the edge-remote connection
{mapping, "edge.uplink.parallelism", "bondy.edge.uplink.parallelism", [
  {default, 1},
  {validators, [pos_integer]},
  {datatype, integer}
]}.

{mapping, "edge.uplink.timeout", "bondy.edge.uplink.timeout", [
  {default, "5s"},
  {datatype, [{duration, ms}, {atom, infinity}]}
]}.


%% @doc Drops the connection after a period of inactivity. This option does not
%% take effect when edge.uplink.ping.enabled is 'off'  and
%% edge.uplink.ping.interval times edge.uplink.ping.max_retries
%% results in a value higher than this option.
%% Notice that for some clients using this option alone is not enough to keep
%% a connection alive as the client will drop the connection due to inactivity.
{mapping, "edge.uplink.idle_timeout", "bondy.edge.uplink.idle_timeout", [
{default, "1h"},
{datatype, [{duration, ms}, {atom, infinity}]}
]}.


%% @doc Defines if PING control message functionality is enabled or
%% not. This option affects client (Bondy Edge) initiated pings only. The
%% remote Bondy router might also initiate ping requests and Bondy Edge will
%% always respond to those even if this option is turned off.
%% This feature is useful to keep a connection alive and validate the
%% connection is healthy.
{mapping, "edge.uplink.ping", "bondy.edge.uplink.ping.enabled", [
  {default, on},
  {datatype, {flag, on, off}}
]}.

%% @doc If edge.uplink.ping.enabled is 'on', this value controls the
%% interval in which Bondy Edge sends PING control messages to edge peers.
{mapping, "edge.uplink.ping.interval", "bondy.edge.uplink.ping.interval", [
  {default, "30s"},
  {datatype, {duration, ms}}
]}.

%% @doc If edge.uplink.ping.enabled is 'on', this value controls how many
%% missed pings are considered a timeout. Thus, after this number of attempts
%% Bondy Edge will drop the connection.
%% If the value is 'infinity' Bondy Edge will never timeout based on missed
%% pings.
{mapping,
"edge.uplink.ping.max_retries",
"bondy.edge.uplink.ping.max_retries", [
  {default, 3},
  {datatype, [integer, {atom, infinity}]}
]}.


%% Maximum frame size allowed by this handler. Bondy will close the
%% connection when a client attempts to send a frame that goes over this limit.
%% For fragmented frames this applies to the size of the reconstituted frame.
%%
%% A value of zero means un unbounded size (internally translated to 'infinity')
{mapping, "edge.uplink.max_frame_size", "bondy.edge.uplink.max_frame_size", [
  {default, infinity},
  {datatype, [{atom, infinity}, integer]}
]}.


{mapping, "edge.uplink.realm.$name.uri", "bondy.edge.uplink.realms", [
  {datatype, string}
]}.

{mapping, "edge.uplink.realm.$name.authid", "bondy.edge.uplink.realms", [
  {datatype, string}
]}.


{mapping, "edge.uplink.realm.$name.cryptosign.pubkey", "bondy.edge.uplink.realms", [
  {datatype, string}
]}.

%% A WAMP procedure implemented by a WAMP callee connected locally to the
%% realm and having been granted the following permissions:
%% - "wamp.register" on the desired procedure e.g. "com.myapp.crypto.sign"
%% - "bondy.callback.register" on "bondy.auth.crytosign.sign"
%%
%% The procedure MUST accept two positional arguments:
%% - user's pubkey
%% - a challenge consisting of a binary encoded using base64
%%
%% And it MUST return the base64 encoded binary resulting from signing
%% the challenge with the users's private key known to the callee matching the
%% provided pubkey.
{mapping, "edge.uplink.realm.$name.cryptosign.procedure", "bondy.edge.uplink.realms", [
  {datatype, string}
]}.

%% Defines the FileName for an exectuable to be use to compute the Crytosign
%% signature. The filename in its whole is used as the name of the executable,
%% including any spaces. The arguments are passed to the executable as-is,
%% without environment variable expansion or other processing, neutralizing
%% injection attack, specifically:
%% * The shell is usually not invoked to start the program, it is executed
%% directly.
%% * Only if a shell script or .bat file is executed, the appropriate command
%% interpreter is invoked implicitly, but there is still no command-argument
%% expansion or implicit PATH search.
%% * PATH (or equivalent) is not searched.
%%
%% The executable is expected to take two positional arguments:
%% - user's pubkey
%% - a challenge consisting of a binary encoded using base64
%%
%% The executable MUST return the base64 encoded binary resulting from signing
%% the challenge with the users's private key known to the exec.

{mapping,
  "edge.uplink.realm.$name.cryptosign.exec",
  "bondy.edge.uplink.realms", [
    {datatype, string}
]}.

{mapping,
  "edge.uplink.realm.$name.cryptosign.privkey_env_var",
  "bondy.edge.uplink.realms", [
    {datatype, string}
]}.


%% Defines a procedure URI pattern that is shared between the two routers for
%% in the defined realm.
{mapping,
  "edge.uplink.realm.$name.procedure.$id",
  "bondy.edge.uplink.realms", [
    {datatype, string}
]}.



{translation,
"bondy.edge.uplink.realms",

fun(Conf0) ->
    Conf = cuttlefish_variable:filter_by_prefix("edge.uplink.realm", Conf0),

    %% The following results in
    %% #{
    %% Id => #{uri, =authid, }
    %% }

      Fun = fun
        ({[_, _, _, IdStr, KeyStr], ValueStr}, Acc)
        when  KeyStr == "uri";
              KeyStr == "authid" ->

          Id = list_to_binary(IdStr),
          Key = list_to_atom(KeyStr),
          Value = list_to_binary(ValueStr),

          case maps:get(Id, Acc, undefined) of
            undefined ->
              maps:put(Id, #{Key => Value}, Acc);
            Old ->
              maps:put(Id, maps:put(Key, Value, Old), Acc)
          end;

        ({[_, _, _, IdStr, "cryptosign", KeyStr], ValueStr}, Acc)
        when  KeyStr == "pubkey";
              KeyStr == "procedure";
              KeyStr == "exec";
              KeyStr == "privkey_env_var" ->

          Id = list_to_binary(IdStr),
          Key = list_to_atom(KeyStr),
          Value = list_to_binary(ValueStr),

          %% #{id => #{cryptosign => #{Key => Value}}}
          case maps:get(Id, Acc, undefined) of
            undefined ->
              Crypto = #{cryptosign => #{Key => Value}},
              maps:put(Id, Crypto, Acc);

            Old ->
              case maps:get(cryptosign, Old, undefined) of
                undefined ->
                  Crypto = Old#{cryptosign => #{Key => Value}},
                  maps:put(Id, Crypto, Acc);
                Crypto0 ->
                  Crypto1 = maps:put(Key, Value, Crypto0),
                  maps:put(Id, Old#{cryptosign => Crypto1}, Acc)
              end
          end
      end,

      Out = lists:foldl(Fun, maps:new(), Conf),

      %% we proyect
      %% #{Uri => Config}
      maps:fold(
        fun(Id, #{uri := Uri} = Realm, Acc) ->
          maps:put(Uri, Realm, Acc)
        end,
        maps:new(),
        Out
      )

end}.

%% =============================================================================
%% EDGE LISTENER TCP CONNECTIONS
%% =============================================================================


%% @doc Enables or disables Bondy edge nodes to connect to Bondy.
{mapping, "edge.listener.tcp", "bondy.edge_tcp.enabled", [
  {default, off},
  {datatype, {flag, on, off}}
]}.

%% @doc TCP port that Bondy edge nodes will use to connect to Bondy.
{mapping, "edge.listener.tcp.port", "bondy.edge_tcp.port", [
  {default, 18092},
  {validators, [port_number]},
  {datatype, integer}
]}.

%% The ranch acceptors_pool_size for the socket tcp listener
{mapping, "edge.listener.tcp.acceptors_pool_size", "bondy.edge_tcp.acceptors_pool_size", [
  {datatype, integer},
  {validators, [pos_integer]},
  {default, 200}
]}.

%% The ranch max number of connections for the socket tcp listener
{mapping, "edge.listener.tcp.max_connections", "bondy.edge_tcp.max_connections", [
  {datatype, integer},
  {validators, [pos_integer]},
  {default, 100000}
]}.

%% The maximum length that the queue of pending connections can grow to.
{mapping, "edge.listener.tcp.backlog", "bondy.edge_tcp.backlog", [
  {datatype, integer},
  {validators, [pos_integer]},
  {default, 1024}
]}.


%% Enables/disables periodic transmission on a connected socket when no other
%% data is exchanged. If the other end does not respond, the connection is
%% considered broken and an error message is sent to the controlling process.
{mapping, "edge.listener.tcp.keepalive", "bondy.edge_tcp.socket_opts.keepalive", [
  {datatype, {flag, on, off}},
  {default, on}
]}.

%% The minimum size of the send buffer to use for the socket.
{mapping, "edge.listener.tcp.sndbuf", "bondy.edge_tcp.socket_opts.sndbuf", [
  {datatype, bytesize}
]}.

%% The minimum size of the receive buffer to use for the socket.
{mapping, "edge.listener.tcp.recbuf", "bondy.edge_tcp.socket_opts.recbuf", [
  {datatype, bytesize}
]}.

%% The size of the user-level software buffer used by the driver.
%% Not to be confused with options sndbuf and recbuf, which correspond to the
%% Kernel socket buffers.
%% It is recommended to have val(buffer) >= max(val(sndbuf),val(recbuf)) to
%% avoid performance issues because of unnecessary copying.
%% val(buffer) is automatically set to the above maximum when values sndbuf or
%% recbuf are set.
{mapping, "edge.listener.tcp.buffer", "bondy.edge_tcp.socket_opts.buffer", [
  {datatype, bytesize}
]}.

%% If Boolean == true, option TCP_NODELAY is turned on for the socket, which
%% means that also small amounts of data are sent immediately.
{mapping, "edge.listener.tcp.nodelay", "bondy.edge_tcp.socket_opts.nodelay", [
  {datatype, {flag, on, off}},
  {default, on}
]}.


%% @doc Defines if  PING control message functionality is enabled or
%% not. This option affects server (Bondy) initiated pings only. Bondy Edge
%% might also initiate ping requests and Bondy will always respond to those
%% even if this option is turned off.
%% This feature is useful to keep a connection alive and validate the
%% connection is healthy.
{mapping, "edge.listener.tcp.ping", "bondy.edge_tcp.ping.enabled", [
  {default, on},
  {datatype, {flag, on, off}}
]}.

%% @doc If edge.listener.tcp.ping.enabled is 'on', this value controls the interval
%% in which Bondy sends PING control messages to edge peers.
{mapping, "edge.listener.tcp.ping.interval", "bondy.edge_tcp.ping.interval", [
  {default, "30s"},
  {datatype, {duration, ms}}
]}.

%% @doc If edge.listener.tcp.ping.enabled is 'on', this value controls how many
%% missed pings are considered a timeout. Thus, after this number of attempts
%% Bondy will drop the connection.
%% If the value is 'infinity' Bondy will never timeout based on missed pings.
{mapping,
"edge.listener.tcp.ping.max_retries",
"bondy.edge_tcp.ping.max_retries",[
  {default, 3},
  {datatype, [integer, {atom, infinity}]}
]}.

%% @doc Drops the connection after a period of inactivity. This option does not
%% take effect when edge.listener.tcp.ping.enabled is 'on'
%% and edge.listener.tcp.ping.interval times
%% edge.listener.tcp.ping.max_retries results in a value higher than this
%% option.
%% Notice that for some clients using this option alone is not enough to keep
%% a connection alive as the client will drop the connection due to inactivity.
{mapping, "edge.listener.tcp.idle_timeout", "bondy.edge_tcp.idle_timeout", [
  {default, "8h"},
  {datatype, [{duration, ms}, {atom, infinity}]}
]}.


%% Maximum frame size allowed by this handler. Bondy will close the
%% connection when a client attempts to send a frame that goes over this limit.
%% For fragmented frames this applies to the size of the reconstituted frame.
%%
%% A value of zero means un unbounded size (internally translated to 'infinity')
{mapping, "edge.listener.tcp.max_frame_size", "bondy.edge_tcp.max_frame_size", [
  {default, infinity},
  {datatype, [{atom, infinity}, integer]}
]}.


%% =============================================================================
%% EDGE LISTENER TLS CONNECTIONS
%% =============================================================================


%% @doc Enables or disables Bondy edge nodes to connect to Bondy.
{mapping, "edge.listener.tls", "bondy.edge_tls.enabled", [
  {default, off},
  {datatype, {flag, on, off}}
]}.

%% @doc TCP port that Bondy edge nodes will use to connect to Bondy.
{mapping, "edge.listener.tls.port", "bondy.edge_tls.port", [
  {default, 18093},
  {validators, [port_number]},
  {datatype, integer}
]}.

%% The ranch acceptors_pool_size for the socket tcp listener
{mapping, "edge.listener.tls.acceptors_pool_size", "bondy.edge_tls.acceptors_pool_size", [
  {datatype, integer},
  {validators, [pos_integer]},
  {default, 200}
]}.

%% The ranch max number of connections for the edge TLS listener
{mapping, "edge.listener.tls.max_connections", "bondy.edge_tls.max_connections", [
  {datatype, integer},
  {validators, [pos_integer]},
  {default, 100000}
]}.

%% The maximum length that the queue of pending connections can grow to.
{mapping, "edge.listener.tls.backlog", "bondy.edge_tls.backlog", [
  {datatype, integer},
  {default, 1024}
]}.


%% Enables/disables periodic transmission on a connected socket when no other
%% data is exchanged. If the other end does not respond, the connection is
%% considered broken and an error message is sent to the controlling process.
{mapping, "edge.listener.tls.keepalive", "bondy.edge_tls.socket_opts.keepalive", [
  {datatype, {flag, on, off}},
  {default, on}
]}.

%% The minimum size of the send buffer to use for the socket.
{mapping, "edge.listener.tls.sndbuf", "bondy.edge_tls.socket_opts.sndbuf", [
  {datatype, bytesize}
]}.

%% The minimum size of the receive buffer to use for the socket.
{mapping, "edge.listener.tls.recbuf", "bondy.edge_tls.socket_opts.recbuf", [
  {datatype, bytesize}
]}.

%% The size of the user-level software buffer used by the driver.
%% Not to be confused with options sndbuf and recbuf, which correspond to the
%% Kernel socket buffers.
%% It is recommended to have val(buffer) >= max(val(sndbuf),val(recbuf)) to
%% avoid performance issues because of unnecessary copying.
%% val(buffer) is automatically set to the above maximum when values sndbuf or
%% recbuf are set.
{mapping, "edge.listener.tls.buffer", "bondy.edge_tls.socket_opts.buffer", [
  {datatype, bytesize}
]}.

%% If Boolean == true, option TCP_NODELAY is turned on for the socket, which
%% means that also small amounts of data are sent immediately.
{mapping, "edge.listener.tls.nodelay", "bondy.edge_tls.socket_opts.nodelay", [
  {datatype, {flag, on, off}},
  {default, on}
]}.



%% @doc Defines if  PING control message functionality is enabled or
%% not. This option affects server (Bondy) initiated pings only. Bondy Edge
%% might also initiate ping requests and Bondy will always respond to those
%% even if this option is turned off.
%% This feature is useful to keep a connection alive and validate the
%% connection is healthy.
{mapping, "edge.listener.tls.ping", "bondy.edge_tls.ping.enabled", [
  {default, on},
  {datatype, {flag, on, off}}
]}.

%% @doc If edge.listener.tls.ping.enabled is 'on', this value controls the interval
%% in which Bondy sends PING control messages to edge peers.
{mapping, "edge.listener.tls.ping.interval", "bondy.edge_tls.ping.interval", [
  {default, "30s"},
  {datatype, {duration, ms}}
]}.

%% @doc If edge.listener.tls.ping.enabled is 'on', this value controls how many
%% missed pings are considered a timeout. Thus, after this number of attempts
%% Bondy will drop the connection.
%% If the value is 'infinity' Bondy will never timeout based on missed pings.
{mapping,
"edge.listener.tls.ping.max_retries",
"bondy.edge_tls.ping.max_retries", [
  {default, 3},
  {datatype, [integer, {atom, infinity}]}
]}.

%% @doc Drops the connection after a period of inactivity. This option does not
%% take effect when edge.listener.tls.ping.enabled is 'on' and edge.listener.tls.ping.
%% interval times edge.listener.tls.ping.max_retries results in a value higher
%% than this option.
%% Notice that for some clients using this option alone is not enough to keep
%% a connection alive as the client will drop the connection due to inactivity.
{mapping, "edge.listener.tls.idle_timeout", "bondy.edge_tls.idle_timeout", [
  {default, "8h"},
  {datatype, [{duration, ms}, {atom, infinity}]}
]}.


%% Maximum frame size allowed by this handler. Bondy will close the
%% connection when a client attempts to send a frame that goes over this limit.
%% For fragmented frames this applies to the size of the reconstituted frame.
%%
%% A value of zero means un unbounded size (internally translated to 'infinity')
{mapping, "edge.listener.tls.max_frame_size", "bondy.edge_tls.max_frame_size", [
  {default, infinity},
  {datatype, [{atom, infinity}, integer]}
]}.


%% @doc Default cert location for https can be overridden
%% with the edge.tls config variable, for example:
{mapping, "edge.listener.tls.certfile", "bondy.edge_tls.tls_opts.certfile", [
  {datatype, file},
  {default, "{{platform_etc_dir}}/cert.pem"}
]}.

%% @doc Default key location for https can be overridden with the
%%edge.tls config variable, for example:
{mapping, "edge.listener.tls.keyfile", "bondy.edge_tls.tls_opts.keyfile", [
  {datatype, file},
  {default, "{{platform_etc_dir}}/key.pem"}
]}.

%% @doc Default signing authority location for https can be overridden
%% with the edge.tls config variable, for example:
{mapping, "edge.listener.tls.cacertfile", "bondy.edge_tls.tls_opts.cacertfile", [
  {datatype, file},
  {default, "{{platform_etc_dir}}/cacert.pem"}
]}.

%% @doc A comma separate list of TLS protocol versions that will be supported
%% At the moment Bondy only supports versions 1.2 and 1.3
{mapping, "edge.listener.tls.versions", "bondy.edge_tls.tls_opts.versions", [
  {datatype, string},
  {default, "1.3"}
]}.



{translation, "bondy.edge.uplink.tls_opts.versions",
fun(Conf) ->
  case cuttlefish:conf_get("edge.uplink.tls.versions", Conf) of
      Value when is_list(Value) ->
        try
          [
            begin
              case string:strip(Version) of
                "1.2" -> 'tlsv1.2';
                "1.3" -> 'tlsv1.3';
                _ -> throw({invalid_version, Version})
              end
            end || Version <- string:split(Value, ",")
          ]
        catch
          throw:{invalid_version, Version} ->
            cuttlefish:invalid("invalid TLS version " ++ Version)
        end;
      _ ->
          cuttlefish:invalid(
            "value should be string containing valid comma separated version numbers e.g. \"1.2, 1.3\""
          )
  end
end
}.

{translation, "bondy.edge_tls.tls_opts.versions",
fun(Conf) ->
  case cuttlefish:conf_get("edge.listener.tls.versions", Conf) of
      Value when is_list(Value) ->
        try
          [
            begin
              case string:strip(Version) of
                "1.2" -> 'tlsv1.2';
                "1.3" -> 'tlsv1.3';
                _ -> throw({invalid_version, Version})
              end
            end || Version <- string:split(Value, ",")
          ]
        catch
          throw:{invalid_version, Version} ->
            cuttlefish:invalid("invalid TLS version " ++ Version)
        end;
      _ ->
          cuttlefish:invalid(
            "value should be string containing valid comma separated version numbers e.g. \"1.2, 1.3\""
          )
  end
end
}.



%% =============================================================================
%% VALIDATORS
%% =============================================================================


{validator,
  "pos_integer",
  "greater than 1",
  fun(Size) -> Size >= 1 end
}.


{validator,
  "port_number",
  "greater than 1024 and less or equal to 65535",
  fun(Port) -> Port >= 1024 andalso Port =< 65535 end
}.
